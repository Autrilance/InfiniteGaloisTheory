/-
Copyright (c) 2024 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang, Nailin Guan, Yuyang Zhao, Yongle Hu
-/
import Mathlib.Topology.ContinuousFunction.Basic
import Mathlib.Algebra.Category.Grp.Basic
import Mathlib.Topology.Category.Profinite.Basic
import Mathlib.Topology.Algebra.ContinuousMonoidHom
import Mathlib.FieldTheory.KrullTopology
import InfiniteGaloisTheory.ProFinite.Basic
import InfiniteGaloisTheory.MissingLemmas.Galois

/-!

# Galois Group as a Profinite Group

In this file, we ....

# Main definitions and results

In `K/k`

* `FiniteGaloisIntermediateField` : The Finite Galois IntermediateField of `K/k`

* `finGal L` : For a `FiniteGaloisIntermediateField` `L`, make `Gal(L/k)` into a FiniteGrp

* `finGalMap L‚ÇÅ ‚ü∂ L‚ÇÇ` : For `FiniteGaloisIntermediateField` `L‚ÇÅ L‚ÇÇ` ordered by inverse inclusion,
  giving the restriction of `Gal(L‚ÇÅ/k)` to `Gal(L‚ÇÇ/k)`

* `finGalFunctor` : Mapping `FiniteGaloisIntermediateField` ordered by inverse inclusion to its
  corresponding Galois Group as FiniteGrp

* `union_eq_univ` : In `K/k`, the union of all the `FiniteGaloisIntermediateField` is equal to `K`,
  Furthermore, there is also a `FiniteGaloisIntermediateField` containing any tuple `(x,y)`

* `HomtoLimit` : Based on the canonical projection from `Gal(K/k)` to any `Gal(L/k)`
  where `L` is `FiniteGaloisIntermediateField`, it can be easily verified that
  the projections are compatible with the morphisms on `FiniteGaloisIntermediateField`
  (ordered by inverse inclusion)

* `ContinuousMulEquiv`

* `Profinite`

# implementation note

This file compiles very slowly, mainly because the two composition of restriction as a composition
of an inverse function of an AlgEquiv composite with another AlgEquiv. Thanks to Yuyang Zhao for
modifying the proofs.

-/

suppress_compilation

theorem AlgEquiv.restrictNormalHom_id (F K : Type*)
    [Field F] [Field K] [Algebra F K] [Normal F K] :
    AlgEquiv.restrictNormalHom (F := F) (K‚ÇÅ := K) K = MonoidHom.id (K ‚âÉ‚Çê[F] K) := by
  ext f x
  dsimp [restrictNormalHom]
  apply (algebraMap K K).injective
  rw [AlgEquiv.restrictNormal_commutes]
  simp

theorem IsScalarTower.algEquivRestrictNormalHom_eq (F K‚ÇÅ K‚ÇÇ K‚ÇÉ : Type*)
    [Field F] [Field K‚ÇÅ] [Field K‚ÇÇ] [Field K‚ÇÉ]
    [Algebra F K‚ÇÅ] [Algebra F K‚ÇÇ] [Algebra F K‚ÇÉ] [Algebra K‚ÇÅ K‚ÇÇ] [Algebra K‚ÇÅ K‚ÇÉ] [Algebra K‚ÇÇ K‚ÇÉ]
    [IsScalarTower F K‚ÇÅ K‚ÇÉ] [IsScalarTower F K‚ÇÅ K‚ÇÇ] [IsScalarTower F K‚ÇÇ K‚ÇÉ] [IsScalarTower K‚ÇÅ K‚ÇÇ K‚ÇÉ]
    [Normal F K‚ÇÅ] [Normal F K‚ÇÇ] :
    AlgEquiv.restrictNormalHom (F := F) (K‚ÇÅ := K‚ÇÉ) K‚ÇÅ =
      (AlgEquiv.restrictNormalHom (F := F) (K‚ÇÅ := K‚ÇÇ) K‚ÇÅ).comp
        (AlgEquiv.restrictNormalHom (F := F) (K‚ÇÅ := K‚ÇÉ) K‚ÇÇ) := by
  ext f x
  dsimp [AlgEquiv.restrictNormalHom]
  apply (algebraMap K‚ÇÅ K‚ÇÉ).injective
  conv_rhs => rw [IsScalarTower.algebraMap_eq K‚ÇÅ K‚ÇÇ K‚ÇÉ]
  simp only [AlgEquiv.restrictNormal_commutes, RingHom.coe_comp, Function.comp_apply,
    EmbeddingLike.apply_eq_iff_eq]
  exact IsScalarTower.algebraMap_apply K‚ÇÅ K‚ÇÇ K‚ÇÉ x

theorem IsScalarTower.algEquivRestrictNormalHom_apply (F K‚ÇÅ K‚ÇÇ : Type*) {K‚ÇÉ : Type*}
    [Field F] [Field K‚ÇÅ] [Field K‚ÇÇ] [Field K‚ÇÉ]
    [Algebra F K‚ÇÅ] [Algebra F K‚ÇÇ] [Algebra F K‚ÇÉ] [Algebra K‚ÇÅ K‚ÇÇ] [Algebra K‚ÇÅ K‚ÇÉ] [Algebra K‚ÇÇ K‚ÇÉ]
    [IsScalarTower F K‚ÇÅ K‚ÇÉ] [IsScalarTower F K‚ÇÅ K‚ÇÇ] [IsScalarTower F K‚ÇÇ K‚ÇÉ] [IsScalarTower K‚ÇÅ K‚ÇÇ K‚ÇÉ]
    [Normal F K‚ÇÅ] [Normal F K‚ÇÇ] (f : K‚ÇÉ ‚âÉ‚Çê[F] K‚ÇÉ) :
    AlgEquiv.restrictNormalHom K‚ÇÅ f =
      (AlgEquiv.restrictNormalHom K‚ÇÅ) (AlgEquiv.restrictNormalHom K‚ÇÇ f) := by
  rw [IsScalarTower.algEquivRestrictNormalHom_eq F K‚ÇÅ K‚ÇÇ K‚ÇÉ, MonoidHom.comp_apply]

open CategoryTheory Topology Opposite

variable (k K : Type*) [Field k] [Field K] [Algebra k K] -- [IsGalois k K]

@[ext]
structure FiniteGaloisIntermediateField where
  val : IntermediateField k K
  [finiteDimensional : FiniteDimensional k val]
  [isGalois : IsGalois k val]

namespace FiniteGaloisIntermediateField

attribute [coe] val

instance : Coe (FiniteGaloisIntermediateField k K) (IntermediateField k K) where
  coe := val

instance : CoeSort (FiniteGaloisIntermediateField k K) (Type _) where
  coe L := L.val

instance (L : FiniteGaloisIntermediateField k K) : FiniteDimensional k L.val :=
  L.finiteDimensional

instance (L : FiniteGaloisIntermediateField k K) : IsGalois k L.val :=
  L.isGalois

variable {k K}

instance : Category (FiniteGaloisIntermediateField k K) :=
  InducedCategory.category val

-- lemma val_injective : Function.Injective
--     fun (L : FiniteGaloisIntermediateField k K) ‚Ü¶ L.val := by
--   rintro ‚ü®‚ü© ‚ü®‚ü© eq
--   dsimp at eq
--   simp [eq]

-- instance : PartialOrder (FiniteGaloisIntermediateField k K) :=
--   PartialOrder.lift val val_injective

def finGal (L : FiniteGaloisIntermediateField k K) : FiniteGrp :=
  letI := AlgEquiv.fintype k L
  FiniteGrp.of <| L ‚âÉ‚Çê[k] L

def finGalMap
    {L‚ÇÅ L‚ÇÇ : (FiniteGaloisIntermediateField k K)·µí·µñ}
    (le : L‚ÇÅ ‚ü∂ L‚ÇÇ) :
    L‚ÇÅ.unop.finGal ‚ü∂ L‚ÇÇ.unop.finGal :=
  haveI : Normal k L‚ÇÇ.unop := IsGalois.to_normal
  letI : Algebra L‚ÇÇ.unop L‚ÇÅ.unop := RingHom.toAlgebra (Subsemiring.inclusion <| leOfHom le.1)
  haveI : IsScalarTower k L‚ÇÇ.unop L‚ÇÅ.unop := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  FiniteGrp.ofHom (AlgEquiv.restrictNormalHom (F := k) (K‚ÇÅ := L‚ÇÅ.unop) L‚ÇÇ.unop)

lemma finGalMap.map_id (L : (FiniteGaloisIntermediateField k K)·µí·µñ) :
    (finGalMap (ùüô L)) = ùüô L.unop.finGal :=
  AlgEquiv.restrictNormalHom_id _ _

lemma finGalMap.map_comp {L‚ÇÅ L‚ÇÇ L‚ÇÉ : (FiniteGaloisIntermediateField k K)·µí·µñ}
    (f : L‚ÇÅ ‚ü∂ L‚ÇÇ) (g : L‚ÇÇ ‚ü∂ L‚ÇÉ) : finGalMap (f ‚â´ g) = finGalMap f ‚â´ finGalMap g := by
  iterate 2
    induction L‚ÇÅ with | _ L‚ÇÅ => ?_
    induction L‚ÇÇ with | _ L‚ÇÇ => ?_
    induction L‚ÇÉ with | _ L‚ÇÉ => ?_
  letI : Algebra L‚ÇÉ L‚ÇÇ := RingHom.toAlgebra (Subsemiring.inclusion g.unop.le)
  letI : Algebra L‚ÇÇ L‚ÇÅ := RingHom.toAlgebra (Subsemiring.inclusion f.unop.le)
  letI : Algebra L‚ÇÉ L‚ÇÅ := RingHom.toAlgebra (Subsemiring.inclusion (g.unop.le.trans f.unop.le))
  haveI : IsScalarTower k L‚ÇÇ L‚ÇÅ := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  haveI : IsScalarTower k L‚ÇÉ L‚ÇÅ := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  haveI : IsScalarTower k L‚ÇÉ L‚ÇÇ := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  haveI : IsScalarTower L‚ÇÉ L‚ÇÇ L‚ÇÅ := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  apply IsScalarTower.algEquivRestrictNormalHom_eq k L‚ÇÉ L‚ÇÇ L‚ÇÅ

def finGalFunctor : (FiniteGaloisIntermediateField k K)·µí·µñ ‚•§ FiniteGrp where
  obj L := L.unop.finGal
  map := finGalMap
  map_id := finGalMap.map_id
  map_comp := finGalMap.map_comp

lemma union_eq_univ'' (x y : K) [IsGalois k K] : ‚àÉ L : (FiniteGaloisIntermediateField k K),
    x ‚àà L.val ‚àß y ‚àà L.val := by
  let L' := normalClosure k (IntermediateField.adjoin k ({x,y} : Set K)) K
  letI : FiniteDimensional k (IntermediateField.adjoin k ({x,y} : Set K)) := by
    have hS : ‚àÄ z ‚àà ({x, y} : Set K), IsIntegral k z := fun z _ =>
      IsAlgebraic.isIntegral (Algebra.IsAlgebraic.isAlgebraic z)
    exact IntermediateField.finiteDimensional_adjoin hS
  let L : (FiniteGaloisIntermediateField k K) := {
    L' with
    finiteDimensional := normalClosure.is_finiteDimensional k (IntermediateField.adjoin k ({x,y} : Set K)) K
    isGalois := IsGalois.normalClosure k (IntermediateField.adjoin k ({x, y} : Set K)) K
  }
  use L
  constructor
  all_goals apply IntermediateField.le_normalClosure
  all_goals unfold IntermediateField.adjoin
  all_goals simp only [Set.union_insert, Set.union_singleton, IntermediateField.mem_mk,
      Subring.mem_toSubsemiring, Subfield.mem_toSubring]
  all_goals apply Subfield.subset_closure
  ¬∑ exact (Set.mem_insert x (insert y (Set.range ‚áë(algebraMap k K))))
  ¬∑ apply Set.subset_insert
    exact Set.mem_insert y (Set.range ‚áë(algebraMap k K))

lemma union_eq_univ' (x : K) [IsGalois k K] : ‚àÉ L : (FiniteGaloisIntermediateField k K),
    x ‚àà L.val := by
  rcases (union_eq_univ'' (k := k) (K := K) x 1) with ‚ü®L, hL‚ü©
  exact ‚ü®L,hL.1‚ü©

noncomputable def homtoLimit : (K ‚âÉ‚Çê[k] K) ‚Üí*
    ProfiniteGrp.limitOfFiniteGrp (finGalFunctor (k := k) (K := K)) where
  toFun œÉ :=
  { val := fun L => (AlgEquiv.restrictNormalHom L.unop) œÉ
    property := fun L‚ÇÅ L‚ÇÇ œÄ ‚Ü¶ by
      dsimp [finGalFunctor, finGalMap]
      letI : Algebra L‚ÇÇ.unop L‚ÇÅ.unop := RingHom.toAlgebra (Subsemiring.inclusion œÄ.1.le)
      letI : IsScalarTower k L‚ÇÇ.unop L‚ÇÅ.unop := IsScalarTower.of_algebraMap_eq (congrFun rfl)
      letI : IsScalarTower L‚ÇÇ.unop L‚ÇÅ.unop K := IsScalarTower.of_algebraMap_eq (congrFun rfl)
      apply (IsScalarTower.algEquivRestrictNormalHom_apply k L‚ÇÇ.unop L‚ÇÅ.unop œÉ).symm }
  map_one' := by
    simp only [map_one]
    rfl
  map_mul' x y := by
    simp only [map_mul]
    rfl

lemma restrict_eq (œÉ : (K ‚âÉ‚Çê[k] K)) (x : K) (Lx : FiniteGaloisIntermediateField k K)
  (hLx : x ‚àà Lx.val) : œÉ x = ‚Üë(((AlgEquiv.restrictNormalHom ‚Ü•Lx) œÉ) ‚ü®x, hLx‚ü©) := by
  change œÉ x = ((AlgEquiv.restrictNormal œÉ Lx) ‚ü®x,hLx‚ü©).1
  have := AlgEquiv.restrictNormal_commutes œÉ Lx ‚ü®x,hLx‚ü©
  convert this
  exact id this.symm

theorem homtoLimit_inj [IsGalois k K] : Function.Injective (homtoLimit (k := k) (K := K)) := by
  intro œÉ‚ÇÅ œÉ‚ÇÇ heq
  ext x
  have : homtoLimit.toFun œÉ‚ÇÅ = homtoLimit.toFun œÉ‚ÇÇ := heq
  unfold homtoLimit at this
  push_cast at this
  apply_fun Subtype.val at this
  dsimp at this
  rcases union_eq_univ' (k := k) x with ‚ü®Lx, hLx‚ü©
  have : (AlgEquiv.restrictNormalHom Lx œÉ‚ÇÅ ‚ü®x, hLx‚ü©).val = (AlgEquiv.restrictNormalHom Lx œÉ‚ÇÇ ‚ü®x, hLx‚ü©).val :=
    congr($this _ _)
  convert this
  all_goals apply restrict_eq

set_option synthInstance.maxHeartbeats 50000 in
lemma homtoLimit_lift' [IsGalois k K]
    (g : (ProfiniteGrp.limitOfFiniteGrp (finGalFunctor (k := k) (K := K))).toProfinite.toTop)
    (x : K) {L : FiniteGaloisIntermediateField k K} (hL : x ‚àà L.val)
    {L' : FiniteGaloisIntermediateField k K} (hL' : x ‚àà L'.val) (h : L ‚ü∂ L'):
    ((g.1 (op L)).1 ‚ü®x,hL‚ü©).1 = ((g.1 (op L')).1 ‚ü®x,hL'‚ü©).1
    := by
  induction L with | _ L => ?_
  induction L' with | _ L' => ?_
  letI : Algebra L L' := RingHom.toAlgebra (Subsemiring.inclusion h.le)
  letI : IsScalarTower k L L' :=
    IsScalarTower.of_algebraMap_eq (congrFun rfl)
  have := g.2 h.op
  rw [‚Üêthis]
  unfold finGalFunctor
  simp only [AlgEquiv.toEquiv_eq_coe, EquivLike.coe_coe]
  dsimp [finGalMap, AlgEquiv.restrictNormalHom]
  change (AlgEquiv.restrictNormal (g.1 (op (mk L'))) L ‚ü®x, hL‚ü©).1 =
    ((g.1 (op (mk L'))).1 ‚ü®x, hL'‚ü©).1
  have comm := AlgEquiv.restrictNormal_commutes (g.1 (op (mk L'))) L ‚ü®x, hL‚ü©
  have : algebraMap L L' ‚ü®x, hL‚ü© = ‚ü®x, hL'‚ü© := by rfl
  rw [this] at comm
  simp only [AlgEquiv.toEquiv_eq_coe, EquivLike.coe_coe]
  rw [‚Üêcomm]
  rfl

lemma homtoLimit_lift [IsGalois k K]
  (g : (ProfiniteGrp.limitOfFiniteGrp (finGalFunctor (k := k) (K := K))).toProfinite.toTop)
  (x : K) {L : FiniteGaloisIntermediateField k K} (hL : x ‚àà L.val) :
    (g.1 (op L)).1 ‚ü®x, hL‚ü© =
    ((g.1 (op (Classical.choose (union_eq_univ' (k := k) x)))).1
      ‚ü®x, (Classical.choose_spec (union_eq_univ' (k := k) x))‚ü©).1
      := by
    let Lx := Classical.choose (union_eq_univ' (k := k) x)
    let hLx := Classical.choose_spec (union_eq_univ' (k := k) x)
    show ((g.1 (op L)).1 ‚ü®x,hL‚ü©).1 = ((g.1 (op Lx)).1 ‚ü®x,hLx‚ü©).1
    let Lm'' := (L.1 ‚äî Lx.1)
    letI : FiniteDimensional k Lm'' := IntermediateField.finiteDimensional_sup L.1 Lx.1
    let Lm' := normalClosure k Lm'' K
    let Lm : FiniteGaloisIntermediateField k K := mk Lm'
    have Lm''_le : Lm'' ‚â§ Lm.1 := IntermediateField.le_normalClosure Lm''
    have L_le : L.val ‚â§ Lm.val := le_trans (SemilatticeSup.le_sup_left L.1 Lx.1) Lm''_le
    have Lx_le : Lx.val ‚â§ Lm.val := le_trans (SemilatticeSup.le_sup_right L.1 Lx.1) Lm''_le
    have trans1 : ((g.1 (op L)).1 ‚ü®x, hL‚ü©).1 = ((g.1 (op Lm)).1 ‚ü®x, (L_le hL)‚ü©).1 :=
      homtoLimit_lift' g x hL (L_le hL) L_le.hom
    have trans2 : ((g.1 (op Lx)).1 ‚ü®x, hLx‚ü©).1 =
      ((g.1 (op Lm)).1 ‚ü®x,(L_le hL)‚ü©).1 := homtoLimit_lift' g x hLx (L_le hL) Lx_le.hom
    rw [trans1, trans2]

def bot : FiniteGaloisIntermediateField k K := ‚ü®‚ä•‚ü©

instance : Algebra k (bot (k := k) (K := K)) := bot.val.algebra'

theorem homtoLimit_surj [IsGalois k K] : Function.Surjective (homtoLimit (k := k) (K := K)) := by
  intro g
  let œÉ' : K ‚Üí‚Çê[k] K := {
    toFun := fun x => ((g.1 (op (Classical.choose (union_eq_univ' (k := k) x)))).1
        ‚ü®x,(Classical.choose_spec (union_eq_univ' (k := k) x))‚ü©).1
    map_one' := by
      dsimp
      have h1 : 1 ‚àà (bot (k := k) (K := K)).val := by exact bot.val.one_mem'
      have := homtoLimit_lift g 1 h1
      simp only [AlgEquiv.toEquiv_eq_coe, EquivLike.coe_coe, Subsemiring.coe_carrier_toSubmonoid,
        Subalgebra.coe_toSubsemiring, IntermediateField.coe_toSubalgebra] at this
      rw [‚Üêthis]
      have : ((g.1 (op bot)).1 ‚ü®1, h1‚ü©) = 1 := by
        simp only [AlgEquiv.toEquiv_eq_coe,
          EquivLike.coe_coe, MulEquivClass.map_eq_one_iff]
        rfl
      dsimp at this
      rw [this]
      rfl
    map_mul' := fun x y => by
      simp only [Subsemiring.coe_carrier_toSubmonoid, Subalgebra.coe_toSubsemiring,
        IntermediateField.coe_toSubalgebra, AlgEquiv.toEquiv_eq_coe, EquivLike.coe_coe]
      rcases (union_eq_univ'' (k := k) x y) with ‚ü®L,hxL,hyL‚ü©
      have hxyL : x * y ‚àà L.val := mul_mem hxL hyL
      have hx := homtoLimit_lift g x hxL
      have hy := homtoLimit_lift g y hyL
      have hxy := homtoLimit_lift g (x * y) hxyL
      simp only [AlgEquiv.toEquiv_eq_coe, EquivLike.coe_coe, Subsemiring.coe_carrier_toSubmonoid,
        Subalgebra.coe_toSubsemiring, IntermediateField.coe_toSubalgebra] at hx hy hxy
      rw [‚Üê hx, ‚Üê hy, ‚Üê hxy]
      have : (‚ü®x * y, hxyL‚ü© : L) = (‚ü®x, hxL‚ü© : L) * (‚ü®y, hyL‚ü© : L) := rfl
      rw [this, map_mul]
      rfl
    map_zero' := by
      dsimp
      have h0 : 0 ‚àà (bot (k := k) (K := K)).val := zero_mem _
      have := homtoLimit_lift g 0 h0
      simp only [AlgEquiv.toEquiv_eq_coe, EquivLike.coe_coe, Subsemiring.coe_carrier_toSubmonoid,
        Subalgebra.coe_toSubsemiring, IntermediateField.coe_toSubalgebra] at this
      rw [‚Üêthis]
      have : ((g.1 (op bot)).1 ‚ü®0,h0‚ü©) = 0 := by
        simp only [AlgEquiv.toEquiv_eq_coe, EquivLike.coe_coe, AddEquivClass.map_eq_zero_iff]
        rfl
      dsimp at this
      rw [this]
      rfl
    map_add' := fun x y => by
      simp only [Subsemiring.coe_carrier_toSubmonoid, Subalgebra.coe_toSubsemiring,
        IntermediateField.coe_toSubalgebra, AlgEquiv.toEquiv_eq_coe, EquivLike.coe_coe]
      rcases (union_eq_univ'' (k := k) x y) with ‚ü®L,hxL,hyL‚ü©
      have hxyL : x + y ‚àà L.val := add_mem hxL hyL
      have hx := homtoLimit_lift g x hxL
      have hy := homtoLimit_lift g y hyL
      have hxy := homtoLimit_lift g (x + y) hxyL
      simp only [AlgEquiv.toEquiv_eq_coe, EquivLike.coe_coe, Subsemiring.coe_carrier_toSubmonoid,
        Subalgebra.coe_toSubsemiring, IntermediateField.coe_toSubalgebra] at hx hy hxy
      rw [‚Üêhx,‚Üêhy, ‚Üêhxy]
      have : (‚ü®x + y, hxyL‚ü© : L) = (‚ü®x, hxL‚ü© : L) + (‚ü®y, hyL‚ü© : L) := rfl
      rw [this, map_add]
      rfl
    commutes' := fun z => by
      simp only [Subsemiring.coe_carrier_toSubmonoid, Subalgebra.coe_toSubsemiring,
        IntermediateField.coe_toSubalgebra, AlgEquiv.toEquiv_eq_coe, EquivLike.coe_coe]
      have hzbot : algebraMap k K z ‚àà (bot (k := k) (K := K)).val := bot.val.algebraMap_mem z
      have hz := homtoLimit_lift g ((algebraMap k K) z) hzbot
      simp only [AlgEquiv.toEquiv_eq_coe, EquivLike.coe_coe, Subsemiring.coe_carrier_toSubmonoid,
        Subalgebra.coe_toSubsemiring, IntermediateField.coe_toSubalgebra] at hz
      rw [‚Üê hz]
      have := (g.1 (op bot)).commutes' z
      dsimp at this
      let z' := algebraMap k (bot (k := k) (K := K)) z
      have coe : algebraMap k K z = z' := rfl
      simp_rw [coe]
      have coe' : algebraMap k (bot (k := k) (K := K)) z = z' := rfl
      simp_rw [coe'] at this
      exact congrArg Subtype.val this
  }
  have := Algebra.IsAlgebraic.algHom_bijective œÉ'
  let œÉ := AlgEquiv.ofBijective œÉ' this
  use œÉ
  apply Subtype.val_injective
  ext L
  unfold_let œÉ
  unfold homtoLimit AlgEquiv.restrictNormalHom
  simp only [MonoidHom.mk'_apply, MonoidHom.coe_mk, OneHom.coe_mk]
  unfold AlgEquiv.restrictNormal
  have : (AlgEquiv.ofBijective œÉ' this).toAlgHom = œÉ' := rfl
  simp_rw [this]
  apply AlgEquiv.ext
  intro x
  have : (œÉ'.restrictNormal' L.unop) x = œÉ' x.1 := by
    unfold AlgHom.restrictNormal'
    simp only [AlgEquiv.coe_ofBijective]
    have := AlgHom.restrictNormal_commutes œÉ' L.unop x
    convert this
  apply Subtype.val_injective
  rw [this]
  show œÉ'.toFun x.1  = ((g.1 L).1 x).1
  simp only [Subsemiring.coe_carrier_toSubmonoid, Subalgebra.coe_toSubsemiring,
    IntermediateField.coe_toSubalgebra, AlgEquiv.toEquiv_eq_coe, EquivLike.coe_coe]
  symm
  apply homtoLimit_lift

noncomputable def  MulEquivtoLimit [IsGalois k K] : (K ‚âÉ‚Çê[k] K) ‚âÉ*
    ProfiniteGrp.limitOfFiniteGrp (finGalFunctor (k := k) (K := K)) :=
  MulEquiv.ofBijective homtoLimit ‚ü®homtoLimit_inj, homtoLimit_surj‚ü©

end FiniteGaloisIntermediateField

/-example : ProfiniteGrp := ProfiniteGroup.of (K ‚âÉ‚Çê[k] K)-/
