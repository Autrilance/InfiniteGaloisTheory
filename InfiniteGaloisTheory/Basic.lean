/-
Copyright (c) 2024 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang, Yongle Hu, Nailin Guan, Yuyang Zhao
-/
import Mathlib.Topology.ContinuousFunction.Basic
import Mathlib.Algebra.Category.Grp.Basic
import Mathlib.Topology.Category.Profinite.Basic
import Mathlib.Topology.Algebra.ContinuousMonoidHom
import Mathlib.FieldTheory.KrullTopology
import InfiniteGaloisTheory.ProFinite.Basic
import InfiniteGaloisTheory.MissingLemmas.Galois

/-!

# Galois Group as a Profinite Group

In this file, we ....

# Main definitions and results

In `K/k`

* `FiniteGaloisIntermediateField` : The Finite Galois IntermediateField of `K/k`

* `finGal L` : For a `FiniteGaloisIntermediateField` `L`, make `Gal(L/k)` into a FiniteGrp

* `finGalMap L‚ÇÅ ‚ü∂ L‚ÇÇ` : For `FiniteGaloisIntermediateField` `L‚ÇÅ L‚ÇÇ` ordered by inverse inclusion,
  giving the restriction of `Gal(L‚ÇÅ/k)` to `Gal(L‚ÇÇ/k)`

* `finGalFunctor` : Mapping `FiniteGaloisIntermediateField` ordered by inverse inclusion to its
  corresponding Galois Group as FiniteGrp

* `union`

* `Hom Gal ‚Üí lim`

* `continuousMulEquiv`

* `Profinite`

# implementation note

This file compiles very slowly, mainly because the two composition of restriction as a composition
of an inverse function of an AlgEquiv composite with another AlgEquiv

-/

suppress_compilation

theorem AlgEquiv.restrictNormalHom_id (F K : Type*)
    [Field F] [Field K] [Algebra F K] [Normal F K] :
    AlgEquiv.restrictNormalHom (F := F) (K‚ÇÅ := K) K = MonoidHom.id (K ‚âÉ‚Çê[F] K) := by
  ext f x
  dsimp [restrictNormalHom]
  apply (algebraMap K K).injective
  rw [AlgEquiv.restrictNormal_commutes]
  simp

theorem IsScalarTower.algEquivRestrictNormalHom_eq (F K‚ÇÅ K‚ÇÇ K‚ÇÉ : Type*)
    [Field F] [Field K‚ÇÅ] [Field K‚ÇÇ] [Field K‚ÇÉ]
    [Algebra F K‚ÇÅ] [Algebra F K‚ÇÇ] [Algebra F K‚ÇÉ] [Algebra K‚ÇÅ K‚ÇÇ] [Algebra K‚ÇÅ K‚ÇÉ] [Algebra K‚ÇÇ K‚ÇÉ]
    [IsScalarTower F K‚ÇÅ K‚ÇÉ] [IsScalarTower F K‚ÇÅ K‚ÇÇ] [IsScalarTower F K‚ÇÇ K‚ÇÉ] [IsScalarTower K‚ÇÅ K‚ÇÇ K‚ÇÉ]
    [Normal F K‚ÇÅ] [Normal F K‚ÇÇ] :
    AlgEquiv.restrictNormalHom (F := F) (K‚ÇÅ := K‚ÇÉ) K‚ÇÅ =
      (AlgEquiv.restrictNormalHom (F := F) (K‚ÇÅ := K‚ÇÇ) K‚ÇÅ).comp
        (AlgEquiv.restrictNormalHom (F := F) (K‚ÇÅ := K‚ÇÉ) K‚ÇÇ) := by
  ext f x
  dsimp [AlgEquiv.restrictNormalHom]
  apply (algebraMap K‚ÇÅ K‚ÇÉ).injective
  conv_rhs => rw [IsScalarTower.algebraMap_eq K‚ÇÅ K‚ÇÇ K‚ÇÉ]
  simp only [AlgEquiv.restrictNormal_commutes, RingHom.coe_comp, Function.comp_apply,
    EmbeddingLike.apply_eq_iff_eq]
  exact IsScalarTower.algebraMap_apply K‚ÇÅ K‚ÇÇ K‚ÇÉ x

open CategoryTheory Topology

universe u

variable (k K : Type u) [Field k] [Field K] [Algebra k K] -- [IsGalois k K]

@[ext]
structure FiniteGaloisIntermediateField extends IntermediateField k K where
  [fin_dim : FiniteDimensional k toIntermediateField]
  [is_gal : IsGalois k toIntermediateField]

namespace FiniteGaloisIntermediateField

instance : SetLike (FiniteGaloisIntermediateField k K) K where
  coe L := L.carrier
  coe_injective' := by rintro ‚ü®‚ü© ‚ü®‚ü©; simp

instance (L : FiniteGaloisIntermediateField k K) : FiniteDimensional k L :=
  L.fin_dim

instance (L : FiniteGaloisIntermediateField k K) : IsGalois k L :=
  L.is_gal

variable {k K}

lemma injective_toIntermediateField : Function.Injective
    fun (L : FiniteGaloisIntermediateField k K) => L.toIntermediateField := by
  intro L1 L2 eq
  dsimp at eq
  ext : 1
  show L1.toIntermediateField.carrier = L2.toIntermediateField.carrier
  rw [eq]

instance : PartialOrder (FiniteGaloisIntermediateField k K) :=
  PartialOrder.lift FiniteGaloisIntermediateField.toIntermediateField injective_toIntermediateField

def finGal (L : FiniteGaloisIntermediateField k K) : FiniteGrp :=
  letI := AlgEquiv.fintype k L
  FiniteGrp.of <| L ‚âÉ‚Çê[k] L

def finGalMap
    {L‚ÇÅ L‚ÇÇ : (FiniteGaloisIntermediateField k K)·µí·µñ}
    (le : L‚ÇÅ ‚ü∂ L‚ÇÇ) :
    L‚ÇÅ.unop.finGal ‚ü∂ L‚ÇÇ.unop.finGal :=
  haveI : Normal k L‚ÇÇ.unop := IsGalois.to_normal
  letI : Algebra L‚ÇÇ.unop L‚ÇÅ.unop := RingHom.toAlgebra (Subsemiring.inclusion <| leOfHom le.1)
  haveI : IsScalarTower k L‚ÇÇ.unop L‚ÇÅ.unop := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  FiniteGrp.ofHom (AlgEquiv.restrictNormalHom (F := k) (K‚ÇÅ := L‚ÇÅ.unop) L‚ÇÇ.unop)

lemma finGalMap.map_id (L : (FiniteGaloisIntermediateField k K)·µí·µñ) :
    (finGalMap (ùüô L)) = ùüô L.unop.finGal :=
  AlgEquiv.restrictNormalHom_id _ _

lemma finGalMap.map_comp {L‚ÇÅ L‚ÇÇ L‚ÇÉ : (FiniteGaloisIntermediateField k K)·µí·µñ}
    (f : L‚ÇÅ ‚ü∂ L‚ÇÇ) (g : L‚ÇÇ ‚ü∂ L‚ÇÉ) : finGalMap (f ‚â´ g) = finGalMap f ‚â´ finGalMap g := by
  suffices h : ‚àÄ (L‚ÇÅ L‚ÇÇ L‚ÇÉ : FiniteGaloisIntermediateField k K) (hf : L‚ÇÇ ‚â§ L‚ÇÅ) (hg : L‚ÇÉ ‚â§ L‚ÇÇ),
      finGalMap (Opposite.op hf.hom ‚â´ Opposite.op hg.hom) = finGalMap (Opposite.op hf.hom) ‚â´ finGalMap (Opposite.op hg.hom) by
    exact h _ _ _ _ _
  intro L‚ÇÅ L‚ÇÇ L‚ÇÉ hf hg
  letI : Algebra L‚ÇÉ L‚ÇÇ := RingHom.toAlgebra (Subsemiring.inclusion hg)
  letI : Algebra L‚ÇÇ L‚ÇÅ := RingHom.toAlgebra (Subsemiring.inclusion hf)
  letI : Algebra L‚ÇÉ L‚ÇÅ := RingHom.toAlgebra (Subsemiring.inclusion (hg.trans hf))
  haveI : IsScalarTower k L‚ÇÇ L‚ÇÅ := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  haveI : IsScalarTower k L‚ÇÉ L‚ÇÅ := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  haveI : IsScalarTower k L‚ÇÉ L‚ÇÇ := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  haveI : IsScalarTower L‚ÇÉ L‚ÇÇ L‚ÇÅ := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  apply IsScalarTower.algEquivRestrictNormalHom_eq k L‚ÇÉ L‚ÇÇ L‚ÇÅ

def finGalFunctor : (FiniteGaloisIntermediateField k K)·µí·µñ ‚•§ FiniteGrp.{u} where
  obj L := L.unop.finGal
  map := finGalMap
  map_id := finGalMap.map_id
  map_comp := finGalMap.map_comp

lemma union_eq_univ'' (x y : K) [IsGalois k K] : ‚àÉ L : (FiniteGaloisIntermediateField k K),
    x ‚àà L.carrier ‚àß y ‚àà L.carrier := by
  let L' := normalClosure k (IntermediateField.adjoin k ({x,y} : Set K)) K
  letI : FiniteDimensional k (IntermediateField.adjoin k ({x,y} : Set K)) := by
    have hS : ‚àÄ z ‚àà ({x,y} : Set K), IsIntegral k z := fun z _ =>
      IsAlgebraic.isIntegral (Algebra.IsAlgebraic.isAlgebraic z)
    exact IntermediateField.finiteDimensional_adjoin hS
  let L : (FiniteGaloisIntermediateField k K) := {
    L' with
    fin_dim := normalClosure.is_finiteDimensional k (IntermediateField.adjoin k ({x,y} : Set K)) K
    is_gal := IsGalois.normalClosure k (IntermediateField.adjoin k ({x,y} : Set K)) K
  }
  use L
  constructor
  all_goals apply IntermediateField.le_normalClosure
  all_goals unfold IntermediateField.adjoin
  all_goals simp only [Set.union_insert, Set.union_singleton, IntermediateField.mem_mk,
      Subring.mem_toSubsemiring, Subfield.mem_toSubring]
  all_goals apply Subfield.subset_closure
  ¬∑ exact (Set.mem_insert x (insert y (Set.range ‚áë(algebraMap k K))))
  ¬∑ apply Set.subset_insert
    exact Set.mem_insert y (Set.range ‚áë(algebraMap k K))

lemma union_eq_univ' (x : K) [IsGalois k K] : ‚àÉ L : (FiniteGaloisIntermediateField k K),
    x ‚àà L.carrier := by
  rcases (union_eq_univ'' (k := k) (K := K) x 1) with ‚ü®L,hL‚ü©
  exact ‚ü®L,hL.1‚ü©

noncomputable def HomtoLimit : (K ‚âÉ‚Çê[k] K) ‚Üí*
    ProfiniteGrp.limitOfFiniteGrp (finGalFunctor (k := k) (K := K)) where
  toFun œÉ := ‚ü®fun L => (AlgEquiv.restrictNormalHom L.unop) œÉ, by
    intro L‚ÇÅ L‚ÇÇ œÄ
    unfold finGalFunctor
    dsimp
    unfold finGalMap
    symm
    letI : Algebra L‚ÇÇ.unop L‚ÇÅ.unop := RingHom.toAlgebra (Subsemiring.inclusion <| leOfHom œÄ.1)
    letI : IsScalarTower k L‚ÇÇ.unop L‚ÇÅ.unop := IsScalarTower.of_algebraMap_eq (congrFun rfl)
    letI : IsScalarTower L‚ÇÇ.unop L‚ÇÅ.unop K := IsScalarTower.of_algebraMap_eq (congrFun rfl)
    rw [IsScalarTower.algEquivRestrictNormalHom_eq k L‚ÇÇ.unop L‚ÇÅ.unop K]
    rfl ‚ü©
  map_one' := by
    simp only [map_one]
    rfl
  map_mul' x y := by
    simp only [map_mul]
    rfl

theorem HomtoLimit_inj : Function.Injective (HomtoLimit (k := k) (K := K)) := by sorry

#check algEquivEquivAlgHom

theorem HomtoLimit_surj : Function.Surjective (HomtoLimit (k := k) (K := K)) := by sorry

end FiniteGaloisIntermediateField

/-example : ProfiniteGrp := ProfiniteGroup.of (K ‚âÉ‚Çê[k] K)-/
