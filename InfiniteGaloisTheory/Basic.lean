/-
Copyright (c) 2024 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang, Yongle Hu, Nailin Guan, Yuyang Zhao
-/
import Mathlib.Topology.ContinuousFunction.Basic
import Mathlib.Algebra.Category.Grp.Basic
import Mathlib.Topology.Category.Profinite.Basic
import Mathlib.Topology.Algebra.ContinuousMonoidHom
import Mathlib.FieldTheory.KrullTopology
import InfiniteGaloisTheory.ProFinite.Basic
import InfiniteGaloisTheory.MissingLemmas.Galois

/-!

# Galois Group as a Profinite Group

In this file, we ....

# Main definitions and results

In `K/k`

* `FiniteGaloisIntermediateField` : The Finite Galois IntermediateField of `K/k`

* `finGal L` : For a `FiniteGaloisIntermediateField` `L`, make `Gal(L/k)` into a FiniteGrp

* `finGalMap L‚ÇÅ ‚ü∂ L‚ÇÇ` : For `FiniteGaloisIntermediateField` `L‚ÇÅ L‚ÇÇ` ordered by inverse inclusion,
  giving the restriction of `Gal(L‚ÇÅ/k)` to `Gal(L‚ÇÇ/k)`

* `finGalFunctor` : Mapping `FiniteGaloisIntermediateField` ordered by inverse inclusion to its
  corresponding Galois Group as FiniteGrp

* `union`

* `Hom Gal ‚Üí lim`

* `continuousMulEquiv`

* `Profinite`

# implementation note

This file compiles very slowly, mainly because the two composition of restriction as a composition
of an inverse function of an AlgEquiv composite with another AlgEquiv

-/

suppress_compilation

open CategoryTheory Topology

universe u

variable (k K : Type u) [Field k] [Field K] [Algebra k K] -- [IsGalois k K]

@[ext]
structure FiniteGaloisIntermediateField extends IntermediateField k K where
  [fin_dim : FiniteDimensional k toIntermediateField]
  [is_gal : IsGalois k toIntermediateField]

namespace FiniteGaloisIntermediateField

instance : SetLike (FiniteGaloisIntermediateField k K) K where
  coe L := L.carrier
  coe_injective' := by rintro ‚ü®‚ü© ‚ü®‚ü©; simp

instance (L : FiniteGaloisIntermediateField k K) : FiniteDimensional k L :=
  L.fin_dim

instance (L : FiniteGaloisIntermediateField k K) : IsGalois k L :=
  L.is_gal

variable {k K}

lemma injective_toIntermediateField : Function.Injective
    fun (L : FiniteGaloisIntermediateField k K) => L.toIntermediateField := by
  intro L1 L2 eq
  dsimp at eq
  ext : 1
  show L1.toIntermediateField.carrier = L2.toIntermediateField.carrier
  rw [eq]

instance : PartialOrder (FiniteGaloisIntermediateField k K) :=
  PartialOrder.lift FiniteGaloisIntermediateField.toIntermediateField injective_toIntermediateField

def finGal (L : FiniteGaloisIntermediateField k K) : FiniteGrp :=
  letI := AlgEquiv.fintype k L
  FiniteGrp.of <| L ‚âÉ‚Çê[k] L

def finGalMap
    {L‚ÇÅ L‚ÇÇ : (FiniteGaloisIntermediateField k K)·µí·µñ}
    (le : L‚ÇÅ ‚ü∂ L‚ÇÇ) :
    L‚ÇÅ.unop.finGal ‚ü∂ L‚ÇÇ.unop.finGal :=
  haveI : Normal k L‚ÇÇ.unop := IsGalois.to_normal
  letI : Algebra L‚ÇÇ.unop L‚ÇÅ.unop := RingHom.toAlgebra (Subsemiring.inclusion <| leOfHom le.1)
  haveI : IsScalarTower k L‚ÇÇ.unop L‚ÇÅ.unop := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  AlgEquiv.restrictNormalHom (F := k) (K‚ÇÅ := L‚ÇÅ.unop) L‚ÇÇ.unop

lemma finGalMap.map_id (L : (FiniteGaloisIntermediateField k K)·µí·µñ) :
    (finGalMap (ùüô L)) = ùüô (L.unop.finGal) := by
  unfold finGalMap AlgEquiv.restrictNormalHom
  congr
  ext x y : 2
  simp only [AlgEquiv.restrictNormal, AlgHom.restrictNormal', AlgHom.restrictNormal,
    AlgEquiv.toAlgHom_eq_coe, AlgEquiv.coe_ofBijective, AlgHom.coe_comp, AlgHom.coe_coe,
    Function.comp_apply]
  apply_fun (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k (L.unop) (L.unop)))
  simp only [MonoidHom.mk'_apply, AlgEquiv.coe_ofBijective, AlgHom.coe_comp, AlgHom.coe_coe,
    Function.comp_apply, AlgEquiv.apply_symm_apply, types_id_apply]
  ext
  simp only [AlgHom.restrictNormalAux, AlgHom.coe_coe, AlgEquiv.ofInjectiveField, AlgHom.coe_mk,
    RingHom.coe_mk, MonoidHom.coe_mk, OneHom.coe_mk, AlgEquiv.ofInjective_apply,
    IsScalarTower.coe_toAlgHom', Algebra.id.map_eq_id, RingHom.id_apply]

set_option maxHeartbeats 500000 in
set_option synthInstance.maxHeartbeats 50000 in
lemma finGalMap.map_comp {L‚ÇÅ L‚ÇÇ L‚ÇÉ : (FiniteGaloisIntermediateField k K)·µí·µñ}
    (f : L‚ÇÅ ‚ü∂ L‚ÇÇ) (g : L‚ÇÇ ‚ü∂ L‚ÇÉ) : finGalMap (f ‚â´ g) = finGalMap f ‚â´ finGalMap g := by
  unfold finGalMap
  letI : Algebra L‚ÇÉ.unop L‚ÇÇ.unop := RingHom.toAlgebra (Subsemiring.inclusion <| leOfHom g.1)
  letI : Algebra L‚ÇÇ.unop L‚ÇÅ.unop := RingHom.toAlgebra (Subsemiring.inclusion <| leOfHom f.1)
  letI : Algebra L‚ÇÉ.unop L‚ÇÅ.unop := RingHom.toAlgebra (Subsemiring.inclusion <| leOfHom (f ‚â´ g).1)
  haveI : IsScalarTower k L‚ÇÉ.unop L‚ÇÅ.unop := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  haveI : IsScalarTower L‚ÇÉ.unop L‚ÇÇ.unop L‚ÇÅ.unop := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  haveI : IsScalarTower k L‚ÇÉ.unop L‚ÇÇ.unop := IsScalarTower.of_algebraMap_eq (congrFun rfl)
  haveI : IsScalarTower k L‚ÇÇ.unop L‚ÇÅ.unop := IsScalarTower.of_algebraMap_eq (congrFun rfl)


  refine DFunLike.ext _ _ fun (œÉ : AlgEquiv _ _ _) => ?_
  change AlgEquiv.restrictNormal œÉ L‚ÇÉ.unop =
    AlgEquiv.restrictNormal (AlgEquiv.restrictNormal œÉ L‚ÇÇ.unop) L‚ÇÉ.unop
  refine AlgEquiv.ext fun x => ?_
  dsimp only [AlgEquiv.restrictNormal, AlgHom.restrictNormal', AlgEquiv.toAlgHom_eq_coe,
    AlgHom.restrictNormal, AlgHom.restrictNormalAux, AlgHom.coe_coe, AlgEquiv.coe_ofBijective,
    AlgHom.coe_comp, AlgHom.coe_mk, RingHom.coe_mk, MonoidHom.coe_mk, OneHom.coe_mk,
    Function.comp_apply]
  apply_fun AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÉ.unop L‚ÇÅ.unop)
  simp only [AlgEquiv.apply_symm_apply]
  have eq (x) : (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÉ.unop L‚ÇÅ.unop)) x =
    ‚ü®‚ü®x, leOfHom (f ‚â´ g).1 x.2‚ü©, by aesop‚ü© := rfl
  conv_rhs => rw [eq]
  ext : 2
  dsimp only
  symm
  have eq x : (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÇ.unop L‚ÇÅ.unop)) x =
    ‚ü®‚ü®x, leOfHom f.1 x.2‚ü©, by aesop‚ü© := rfl
  simp_rw [eq]
  have eq x : (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÉ.unop L‚ÇÇ.unop)) x =
    ‚ü®‚ü®x, leOfHom g.1 x.2‚ü©, by aesop‚ü© := rfl
  simp_rw [eq]

  dsimp only [SetLike.coe_sort_coe, IsScalarTower.coe_toAlgHom', id_eq, eq_mpr_eq_cast, cast_eq,
    eq_mp_eq_cast]
  generalize_proofs h1 h2 h3 h4 h5
  change ((AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÉ.unop L‚ÇÇ.unop)).symm
    ‚ü®(AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÇ.unop L‚ÇÅ.unop)).symm
      ‚ü®œÉ ‚ü®x, leOfHom (f ‚â´ g).1 x.2‚ü©, h4‚ü©, h5‚ü©).1 = _
  suffices eq : (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÉ.unop L‚ÇÇ.unop)).symm
    ‚ü®(AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÇ.unop L‚ÇÅ.unop)).symm
      ‚ü®œÉ ‚ü®x, leOfHom (f ‚â´ g).1 x.2‚ü©, h4‚ü©, h5‚ü© =
    ‚ü®œÉ ‚ü®x, _‚ü©, by
      simp only [AlgHom.mem_range, IsScalarTower.coe_toAlgHom', Subtype.exists] at h5
      obtain ‚ü®a, ha, eq‚ü© := h5
      apply_fun (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÇ.unop L‚ÇÅ.unop)) at eq
      simp only [AlgEquiv.apply_symm_apply] at eq
      rw [Subtype.ext_iff] at eq
      simp only at eq
      erw [‚Üê eq]
      exact ha‚ü© by
    rw [eq]
    rfl

  apply_fun AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÉ.unop L‚ÇÇ.unop)
  simp only [AlgEquiv.apply_symm_apply]
  ext : 1
  apply_fun AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÇ.unop L‚ÇÅ.unop)
  simp only [AlgEquiv.apply_symm_apply]
  rfl

def finGalFunctor : (FiniteGaloisIntermediateField k K)·µí·µñ ‚•§ FiniteGrp.{u} where
  obj L := L.unop.finGal
  map := finGalMap
  map_id := finGalMap.map_id
  map_comp := finGalMap.map_comp

lemma union_eq_univ'' (x y : K) [IsGalois k K] : ‚àÉ L : (FiniteGaloisIntermediateField k K),
    x ‚àà L.carrier ‚àß y ‚àà L.carrier := by
  let L' := normalClosure k (IntermediateField.adjoin k ({x,y} : Set K)) K
  letI : FiniteDimensional k (IntermediateField.adjoin k ({x,y} : Set K)) := by
    have hS : ‚àÄ z ‚àà ({x,y} : Set K), IsIntegral k z := fun z _ =>
      IsAlgebraic.isIntegral (Algebra.IsAlgebraic.isAlgebraic z)
    exact IntermediateField.finiteDimensional_adjoin hS
  let L : (FiniteGaloisIntermediateField k K) := {
    L' with
    fin_dim := normalClosure.is_finiteDimensional k (IntermediateField.adjoin k ({x,y} : Set K)) K
    is_gal := IsGalois.normalClosure k (IntermediateField.adjoin k ({x,y} : Set K)) K
  }
  use L
  constructor
  all_goals apply IntermediateField.le_normalClosure
  all_goals unfold IntermediateField.adjoin
  all_goals simp only [Set.union_insert, Set.union_singleton, IntermediateField.mem_mk,
      Subring.mem_toSubsemiring, Subfield.mem_toSubring]
  all_goals apply Subfield.subset_closure
  ¬∑ exact (Set.mem_insert x (insert y (Set.range ‚áë(algebraMap k K))))
  ¬∑ apply Set.subset_insert
    exact Set.mem_insert y (Set.range ‚áë(algebraMap k K))

lemma union_eq_univ' (x : K) [IsGalois k K] : ‚àÉ L : (FiniteGaloisIntermediateField k K),
    x ‚àà L.carrier := by
  rcases (union_eq_univ'' (k := k) (K := K) x 1) with ‚ü®L,hL‚ü©
  exact ‚ü®L,hL.1‚ü©

set_option maxHeartbeats 500000 in
set_option synthInstance.maxHeartbeats 50000 in
noncomputable def HomtoLimit : (K ‚âÉ‚Çê[k] K) ‚Üí*
    ProfiniteGrp.limitOfFiniteGrp (finGalFunctor (k := k) (K := K)) where
  toFun œÉ := ‚ü®fun L => (AlgEquiv.restrictNormalHom L.unop) œÉ,
    by
    intro L‚ÇÅ L‚ÇÇ œÄ
    unfold finGalFunctor
    dsimp
    unfold finGalMap
    symm
    letI : Algebra L‚ÇÇ.unop L‚ÇÅ.unop := RingHom.toAlgebra (Subsemiring.inclusion <| leOfHom œÄ.1)
    letI : IsScalarTower k L‚ÇÇ.unop L‚ÇÅ.unop := IsScalarTower.of_algebraMap_eq (congrFun rfl)
    change AlgEquiv.restrictNormal œÉ L‚ÇÇ.unop =
    AlgEquiv.restrictNormal (AlgEquiv.restrictNormal œÉ L‚ÇÅ.unop) L‚ÇÇ.unop
    refine AlgEquiv.ext fun x => ?_
    dsimp only [AlgEquiv.restrictNormal, AlgHom.restrictNormal', AlgEquiv.toAlgHom_eq_coe,
    AlgHom.restrictNormal, AlgHom.restrictNormalAux, AlgHom.coe_coe, AlgEquiv.coe_ofBijective,
    AlgHom.coe_comp, AlgHom.coe_mk, RingHom.coe_mk, MonoidHom.coe_mk, OneHom.coe_mk,
    Function.comp_apply]
    apply_fun
      (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k (‚Ü•(L‚ÇÇ.unop).toIntermediateField) K))
    simp only [AlgEquiv.apply_symm_apply]
    have eq (x) : (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÇ.unop K)) x =
      ‚ü®x, by aesop‚ü© := rfl
    conv_rhs => rw [eq]
    ext : 2
    dsimp only
    symm
    have eq (x) : (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÅ.unop K)) x =
        ‚ü®x, by aesop‚ü© := rfl
    simp_rw [eq]
    have eq (x) : (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÇ.unop L‚ÇÅ.unop)) x =
        ‚ü®‚ü®x, leOfHom œÄ.1 x.2‚ü©, by aesop‚ü© := rfl
    simp_rw [eq]

    dsimp only [SetLike.coe_sort_coe, IsScalarTower.coe_toAlgHom', id_eq, eq_mpr_eq_cast, cast_eq,
      eq_mp_eq_cast]
    generalize_proofs h1 h2 h3 h4 h5
    change ((AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÇ.unop L‚ÇÅ.unop)).symm
      ‚ü®(AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÅ.unop K)).symm ‚ü®œÉ x, h4‚ü©, h5‚ü©).1 = _
    suffices eq : (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÇ.unop L‚ÇÅ.unop)).symm
      ‚ü®(AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÅ.unop K)).symm
        ‚ü®œÉ x, h4‚ü©, h5‚ü© = ‚ü®œÉ x, by
        simp only [AlgHom.mem_range, IsScalarTower.coe_toAlgHom', Subtype.exists] at h5
        obtain ‚ü®a, ha, eq‚ü© := h5
        apply_fun (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÅ.unop K)) at eq
        simp only [AlgEquiv.apply_symm_apply] at eq
        rw [Subtype.ext_iff] at eq
        simp only at eq
        erw [‚Üê eq]
        exact ha‚ü© by
      rw [eq]
      rfl
    apply_fun (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÇ.unop L‚ÇÅ.unop))
    simp only [AlgEquiv.apply_symm_apply]
    ext : 1
    apply_fun (AlgEquiv.ofInjectiveField (IsScalarTower.toAlgHom k L‚ÇÅ.unop K))
    simp only [AlgEquiv.apply_symm_apply]
    rfl‚ü©
  map_one' := by
    simp only [map_one]
    rfl
  map_mul' x y := by
    simp only [map_mul]
    rfl

theorem HomtoLimit_inj : Function.Injective (HomtoLimit (k := k) (K := K)) := by sorry

#check algEquivEquivAlgHom

theorem HomtoLimit_surj : Function.Surjective (HomtoLimit (k := k) (K := K)) := by sorry

end FiniteGaloisIntermediateField

/-example : ProfiniteGrp := ProfiniteGroup.of (K ‚âÉ‚Çê[k] K)-/
